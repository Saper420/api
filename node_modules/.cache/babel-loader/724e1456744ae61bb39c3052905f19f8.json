{"ast":null,"code":"import { API_URL } from \"../config\";\nexport const getAllTables = state => state.tables;\nexport const allTables = _ref => {\n  let {\n    tables\n  } = _ref;\n  return tables;\n};\nexport const findTableById = (_ref2, tableId) => {\n  let {\n    tables\n  } = _ref2;\n  return tables.find(table => table.id === tableId);\n};\n\nconst createActionName = actionName => `app/tables/${actionName}`;\n\nconst DOWNLOAD_TABLES = createActionName('DOWNLOAD_TABLES');\nconst UPDATE_TABLE = createActionName('UPDATE_TABLE');\nconst ADD_TABLE = createActionName('ADD_TABLE');\nconst DELETE_TABLE = createActionName('DELETE_TABLE');\nexport const downloadTables = payload => ({\n  type: DOWNLOAD_TABLES,\n  payload\n});\nexport const updateTable = payload => ({\n  type: UPDATE_TABLE,\n  payload\n});\nexport const addTable = payload => ({\n  type: ADD_TABLE,\n  payload\n});\nexport const deleteTable = payload => ({\n  type: DELETE_TABLE,\n  payload\n});\nexport const fetchTables = () => {\n  const url = API_URL + '/tables';\n  return dispatch => {\n    fetch(url).then(res => res.json()).then(tables => dispatch(downloadTables(tables)));\n  };\n};\nexport const addTableRequest = newTable => {\n  const url = API_URL + '/tables';\n  return dispatch => {\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newTable)\n    };\n    fetch(url, options).then(res => {\n      if (res.ok) dispatch(updateTable(newTable));else alert('Wystąpił błąd. Prawdopodobnie podano istniejący już numer stolika.');\n    });\n  };\n};\nexport const updateTableRequest = updateTabe => {\n  const url = API_URL + '/tables/' + updateTabe.id;\n  return dispatch => {\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateTabe)\n    };\n    fetch(url, options).then(() => dispatch(updateTable(updateTabe)));\n  };\n};\nexport const deleteTableRequest = id => {\n  const url = API_URL + '/tables/' + id;\n  return dispatch => {\n    const options = {\n      method: 'DELETE'\n    };\n    fetch(url, options).then(res => {\n      if (res.ok) dispatch(deleteTable(id));else alert('Wystąpił błąd.');\n    });\n  };\n};\nexport const tablesReducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DOWNLOAD_TABLES:\n      return [...action.payload];\n\n    case UPDATE_TABLE:\n      return statePart.map(table => table.id === action.payload.id ? { ...action.payload\n      } : table);\n\n    case ADD_TABLE:\n      return [...statePart, { ...action.payload\n      }];\n\n    case DELETE_TABLE:\n      return statePart.filter(table => table.id !== action.payload);\n\n    default:\n      return statePart;\n  }\n\n  ;\n};","map":{"version":3,"sources":["C:/Users/SaPeR/Desktop/Kodilla/pizzeria_2/src/redux/tablesRedux.js"],"names":["API_URL","getAllTables","state","tables","allTables","findTableById","tableId","find","table","id","createActionName","actionName","DOWNLOAD_TABLES","UPDATE_TABLE","ADD_TABLE","DELETE_TABLE","downloadTables","payload","type","updateTable","addTable","deleteTable","fetchTables","url","dispatch","fetch","then","res","json","addTableRequest","newTable","options","method","headers","body","JSON","stringify","ok","alert","updateTableRequest","updateTabe","deleteTableRequest","tablesReducer","statePart","action","map","filter"],"mappings":"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","sourcesContent":["import { API_URL } from \"../config\";\r\nexport const getAllTables = (state) => state.tables;\r\nexport const allTables = ({ tables }) => tables\r\nexport const findTableById = ({ tables }, tableId) => tables.find(table => table.id === tableId)\r\n\r\nconst createActionName = actionName => `app/tables/${actionName}`\r\nconst DOWNLOAD_TABLES = createActionName('DOWNLOAD_TABLES')\r\nconst UPDATE_TABLE = createActionName('UPDATE_TABLE')\r\nconst ADD_TABLE = createActionName('ADD_TABLE')\r\nconst DELETE_TABLE = createActionName('DELETE_TABLE')\r\n\r\nexport const downloadTables = payload => ({type: DOWNLOAD_TABLES, payload})\r\nexport const updateTable = payload => ({type: UPDATE_TABLE, payload})\r\nexport const addTable = payload => ({type: ADD_TABLE, payload})\r\nexport const deleteTable = payload => ({type: DELETE_TABLE, payload})\r\n\r\nexport const fetchTables = () => {\r\n    const url = API_URL + '/tables'\r\n    return (dispatch) => {\r\n      fetch(url)\r\n        .then(res => res.json())\r\n        .then(tables => dispatch(downloadTables(tables)))\r\n    }\r\n}\r\n  \r\nexport const addTableRequest = newTable => {\r\n    const url = API_URL + '/tables'\r\n    return dispatch => {\r\n        const options = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(newTable),\r\n        }; \r\n        fetch(url, options)\r\n        .then(res => {\r\n            if(res.ok) dispatch(updateTable(newTable))\r\n            else alert('Wystąpił błąd. Prawdopodobnie podano istniejący już numer stolika.')\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateTableRequest = updateTabe => {\r\n    const url = API_URL + '/tables/' + updateTabe.id\r\n    return dispatch => {\r\n        const options = {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(updateTabe),\r\n        }; \r\n        fetch(url, options)\r\n        .then(() => dispatch(updateTable(updateTabe)))\r\n    }\r\n}\r\n\r\nexport const deleteTableRequest = id => {\r\n    const url = API_URL + '/tables/' + id\r\n    return dispatch => {\r\n        const options = {\r\n        method: 'DELETE',\r\n        }; \r\n        fetch(url, options)\r\n        .then(res => {\r\n            if(res.ok) dispatch(deleteTable(id))\r\n            else alert('Wystąpił błąd.')\r\n        })\r\n    }\r\n}\r\n\r\nexport  const tablesReducer = (statePart = [], action) => {\r\n    switch (action.type) {\r\n        case DOWNLOAD_TABLES:\r\n            return [...action.payload]\r\n        case UPDATE_TABLE:\r\n            return statePart.map(table => (table.id === action.payload.id) ? { ...action.payload } : table)\r\n        case ADD_TABLE:\r\n            return [...statePart, { ...action.payload}]\r\n        case DELETE_TABLE:\r\n            return statePart.filter(table => table.id !== action.payload);\r\n        default:\r\n            return statePart;\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}