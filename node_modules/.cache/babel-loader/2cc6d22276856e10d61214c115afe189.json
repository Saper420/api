{"ast":null,"code":"import { API_URL } from \"../config\";\nexport const getAllTables = state => state.tables;\nexport const getAllStatuses = state => state.statuses;\nexport const getTablesById = (state, id) => state.tables.find(table => table.id == id);\n\nconst createActionName = actionName => `app/tables/${actionName}`;\n\nconst EDIT_TABLE = createActionName(\"EDIT_TABLE\");\nconst UPDATE_TABLES = createActionName(\"UPDATE_TABLES\");\nexport const editTable = payload => ({\n  type: EDIT_TABLE,\n  payload\n});\nexport const updateTables = payload => ({\n  type: UPDATE_TABLES,\n  payload\n});\nexport const fetchTables = () => {\n  return dispatch => {\n    fetch(API_URL + '/tables').then(res => res.json()).then(tables => dispatch(updateTables(tables)));\n  };\n};\nexport const updateSingleTable = tableData => {\n  return dispatch => {\n    const options = {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status: tableData.status,\n        peopleAmount: tableData.peopleAmount,\n        maxPeopleAmount: tableData.maxPeopleAmount,\n        bill: tableData.bill\n      })\n    };\n    fetch(API_URL + `/tables/${tableData.id}`, options).then(() => dispatch(editTable(tableData)));\n  };\n};\nexport const tablesReducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case EDIT_TABLE:\n      return statePart.map(table => table.id == action.payload.id ? { ...table,\n        ...action.payload\n      } : table);\n\n    case UPDATE_TABLES:\n      return [...action.payload];\n\n    default:\n      return statePart;\n  }\n};","map":{"version":3,"sources":["C:/Users/SaPeR/Desktop/Kodilla/pizzeria_2/src/redux/tablesRedux.js"],"names":["API_URL","getAllTables","state","tables","getAllStatuses","statuses","getTablesById","id","find","table","createActionName","actionName","EDIT_TABLE","UPDATE_TABLES","editTable","payload","type","updateTables","fetchTables","dispatch","fetch","then","res","json","updateSingleTable","tableData","options","method","headers","body","JSON","stringify","status","peopleAmount","maxPeopleAmount","bill","tablesReducer","statePart","action","map"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AAEA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAWA,KAAK,CAACC,MAAtC;AACP,OAAO,MAAMC,cAAc,GAAIF,KAAD,IAAWA,KAAK,CAACG,QAAxC;AACP,OAAO,MAAMC,aAAa,GAAG,CAACJ,KAAD,EAAQK,EAAR,KAC3BL,KAAK,CAACC,MAAN,CAAaK,IAAb,CAAmBC,KAAD,IAAWA,KAAK,CAACF,EAAN,IAAYA,EAAzC,CADK;;AAGP,MAAMG,gBAAgB,GAAIC,UAAD,IAAiB,cAAaA,UAAW,EAAlE;;AACA,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,YAAD,CAAnC;AACA,MAAMG,aAAa,GAAGH,gBAAgB,CAAC,eAAD,CAAtC;AAEA,OAAO,MAAMI,SAAS,GAAGC,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEJ,UAAR;AAAoBG,EAAAA;AAApB,CAAL,CAAzB;AACP,OAAO,MAAME,YAAY,GAAGF,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEH,aAAR;AAAuBE,EAAAA;AAAvB,CAAL,CAA5B;AAEP,OAAO,MAAMG,WAAW,GAAG,MAAM;AAC/B,SAAQC,QAAD,IAAc;AACnBC,IAAAA,KAAK,CAACpB,OAAO,GAAC,SAAT,CAAL,CACGqB,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESlB,MAAD,IAAYgB,QAAQ,CAACF,YAAY,CAACd,MAAD,CAAb,CAF5B;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,MAAMqB,iBAAiB,GAAGC,SAAS,IAAI;AAC5C,SAAQN,QAAD,IAAc;AACnB,UAAMO,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,OADM;AAGdC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAHK;AAOdC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,MAAM,EAAEP,SAAS,CAACO,MADC;AAEnBC,QAAAA,YAAY,EAAER,SAAS,CAACQ,YAFL;AAGnBC,QAAAA,eAAe,EAAET,SAAS,CAACS,eAHR;AAInBC,QAAAA,IAAI,EAAEV,SAAS,CAACU;AAJG,OAAf;AAPQ,KAAhB;AAcAf,IAAAA,KAAK,CAACpB,OAAO,GAAE,WAAUyB,SAAS,CAAClB,EAAG,EAAjC,EAAoCmB,OAApC,CAAL,CACGL,IADH,CACQ,MAAMF,QAAQ,CAACL,SAAS,CAACW,SAAD,CAAV,CADtB;AAED,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMW,aAAa,GAAG,YAA4B;AAAA,MAA3BC,SAA2B,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACvD,UAAQA,MAAM,CAACtB,IAAf;AACE,SAAKJ,UAAL;AACE,aAAOyB,SAAS,CAACE,GAAV,CAAe9B,KAAD,IACnBA,KAAK,CAACF,EAAN,IAAY+B,MAAM,CAACvB,OAAP,CAAeR,EAA3B,GAAgC,EAAE,GAAGE,KAAL;AAAY,WAAG6B,MAAM,CAACvB;AAAtB,OAAhC,GAAkEN,KAD7D,CAAP;;AAGF,SAAKI,aAAL;AACE,aAAO,CAAC,GAAGyB,MAAM,CAACvB,OAAX,CAAP;;AACF;AACE,aAAOsB,SAAP;AARJ;AAUD,CAXM","sourcesContent":["import { API_URL } from \"../config\";\r\n\r\nexport const getAllTables = (state) => state.tables;\r\nexport const getAllStatuses = (state) => state.statuses;\r\nexport const getTablesById = (state, id) =>\r\n  state.tables.find((table) => table.id == id);\r\n\r\nconst createActionName = (actionName) => `app/tables/${actionName}`;\r\nconst EDIT_TABLE = createActionName(\"EDIT_TABLE\");\r\nconst UPDATE_TABLES = createActionName(\"UPDATE_TABLES\");\r\n\r\nexport const editTable = payload => ({ type: EDIT_TABLE, payload })\r\nexport const updateTables = payload => ({ type: UPDATE_TABLES, payload });\r\n\r\nexport const fetchTables = () => {\r\n  return (dispatch) => {\r\n    fetch(API_URL+'/tables')\r\n      .then((res) => res.json())\r\n      .then((tables) => dispatch(updateTables(tables)));\r\n  };\r\n};\r\n\r\nexport const updateSingleTable = tableData => {\r\n  return (dispatch) => {\r\n    const options = {\r\n      method: 'PATCH',\r\n    \r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    \r\n      body: JSON.stringify({\r\n        status: tableData.status,\r\n        peopleAmount: tableData.peopleAmount,\r\n        maxPeopleAmount: tableData.maxPeopleAmount,\r\n        bill: tableData.bill\r\n      })\r\n    };\r\n    fetch(API_URL+`/tables/${tableData.id}`, options)\r\n      .then(() => dispatch(editTable(tableData)))\r\n  }\r\n}\r\n\r\nexport const tablesReducer = (statePart = [], action) => {\r\n  switch (action.type) {\r\n    case EDIT_TABLE:\r\n      return statePart.map((table) =>\r\n        table.id == action.payload.id ? { ...table, ...action.payload } : table\r\n      );\r\n    case UPDATE_TABLES:\r\n      return [...action.payload];\r\n    default:\r\n      return statePart;\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}