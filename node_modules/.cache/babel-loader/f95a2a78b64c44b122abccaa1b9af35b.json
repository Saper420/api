{"ast":null,"code":"//selectors\nexport const getAllTables = state => state.tables;\nexport const getTableId = (_ref, tableId) => {\n  let {\n    tables\n  } = _ref;\n  return tables.find(table => table.id === tableId);\n}; // action names\n\nconst createActionName = name => `app/tables/${name}`;\n\nconst UPDATE_TABLES = createActionName('UPDATE_TABLESS');\nconst EDIT_TABLE = createActionName('EDIT_TABLE'); // action creators\n\nexport const updateTables = payload => ({\n  type: UPDATE_TABLES,\n  payload\n});\nexport const editTable = payload => ({\n  type: EDIT_TABLE,\n  payload\n});\nexport const fetchTables = () => {\n  return dispatch => {\n    fetch('http://localhost:3131/api/tables').then(res => res.json()).then(tables => dispatch(updateTables(tables)));\n  };\n};\nexport const updateSingleTable = tableData => {\n  return dispatch => {\n    const options = {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status: tableData.status,\n        peopleAmount: tableData.peopleAmount,\n        maxPeopleAmount: tableData.maxPeopleAmount,\n        bill: tableData.bill\n      })\n    };\n    fetch(`http://localhost:3131/tables/${tableData.id}`, options).then(() => dispatch(editTable(tableData)));\n  };\n};\n\nconst tablesReducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_TABLES:\n      return [...action.payload];\n\n    case EDIT_TABLE:\n      return statePart.map(table => table.id === action.payload.id ? { ...table,\n        ...action.payload\n      } : table);\n\n    default:\n      return statePart;\n  }\n};\n\nexport default tablesReducer;","map":{"version":3,"sources":["C:/Users/SaPeR/Desktop/Kodilla/pizzeria_2/src/redux/tablesRedux.js"],"names":["getAllTables","state","tables","getTableId","tableId","find","table","id","createActionName","name","UPDATE_TABLES","EDIT_TABLE","updateTables","payload","type","editTable","fetchTables","dispatch","fetch","then","res","json","updateSingleTable","tableData","options","method","headers","body","JSON","stringify","status","peopleAmount","maxPeopleAmount","bill","tablesReducer","statePart","action","map"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAGC,KAAK,IAAIA,KAAK,CAACC,MAApC;AACP,OAAO,MAAMC,UAAU,GAAG,OAAaC,OAAb;AAAA,MAAC;AAAEF,IAAAA;AAAF,GAAD;AAAA,SAAyBA,MAAM,CAACG,IAAP,CAAYC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaH,OAAlC,CAAzB;AAAA,CAAnB,C,CAEP;;AACA,MAAMI,gBAAgB,GAAGC,IAAI,IAAK,cAAaA,IAAK,EAApD;;AACA,MAAMC,aAAa,GAAGF,gBAAgB,CAAC,gBAAD,CAAtC;AACA,MAAMG,UAAU,GAAGH,gBAAgB,CAAC,YAAD,CAAnC,C,CAEA;;AACA,OAAO,MAAMI,YAAY,GAAGC,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEJ,aAAR;AAAuBG,EAAAA;AAAvB,CAAL,CAA5B;AACP,OAAO,MAAME,SAAS,GAAGF,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEH,UAAR;AAAoBE,EAAAA;AAApB,CAAL,CAAzB;AACP,OAAO,MAAMG,WAAW,GAAG,MAAM;AAC/B,SAAQC,QAAD,IAAc;AACnBC,IAAAA,KAAK,CAAC,kCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQjB,MAAM,IAAIe,QAAQ,CAACL,YAAY,CAACV,MAAD,CAAb,CAF1B;AAGC,GAJH;AAKD,CANM;AAOP,OAAO,MAAMoB,iBAAiB,GAAGC,SAAS,IAAI;AAC5C,SAAQN,QAAD,IAAc;AACnB,UAAMO,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,OADM;AAGdC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAHK;AAOdC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,MAAM,EAAEP,SAAS,CAACO,MADC;AAEnBC,QAAAA,YAAY,EAAER,SAAS,CAACQ,YAFL;AAGnBC,QAAAA,eAAe,EAAET,SAAS,CAACS,eAHR;AAInBC,QAAAA,IAAI,EAAEV,SAAS,CAACU;AAJG,OAAf;AAPQ,KAAhB;AAeAf,IAAAA,KAAK,CAAE,gCAA+BK,SAAS,CAAChB,EAAG,EAA9C,EAAiDiB,OAAjD,CAAL,CACGL,IADH,CACQ,MAAMF,QAAQ,CAACF,SAAS,CAACQ,SAAD,CAAV,CADtB;AAED,GAlBD;AAmBD,CApBM;;AAsBP,MAAMW,aAAa,GAAG,YAA4B;AAAA,MAA3BC,SAA2B,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAChD,UAAOA,MAAM,CAACtB,IAAd;AACE,SAAKJ,aAAL;AACE,aAAO,CAAC,GAAG0B,MAAM,CAACvB,OAAX,CAAP;;AACF,SAAKF,UAAL;AACE,aAAOwB,SAAS,CAACE,GAAV,CAAc/B,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAa6B,MAAM,CAACvB,OAAP,CAAeN,EAA5B,GAAiC,EAAE,GAAGD,KAAL;AAAY,WAAG8B,MAAM,CAACvB;AAAtB,OAAjC,GAAmEP,KAA1F,CAAP;;AACF;AACE,aAAO6B,SAAP;AANJ;AAQD,CATD;;AAWA,eAAeD,aAAf","sourcesContent":["//selectors\r\nexport const getAllTables = state => state.tables;\r\nexport const getTableId = ({ tables }, tableId) => tables.find(table => table.id === tableId);\r\n\r\n// action names\r\nconst createActionName = name => `app/tables/${name}`;\r\nconst UPDATE_TABLES = createActionName('UPDATE_TABLESS')\r\nconst EDIT_TABLE = createActionName('EDIT_TABLE')\r\n\r\n// action creators\r\nexport const updateTables = payload => ({ type: UPDATE_TABLES, payload });\r\nexport const editTable = payload => ({ type: EDIT_TABLE, payload })\r\nexport const fetchTables = () => {\r\n  return (dispatch) => {\r\n    fetch('http://localhost:3131/api/tables')\r\n      .then(res => res.json())\r\n      .then(tables => dispatch(updateTables(tables)))\r\n    };\r\n};\r\nexport const updateSingleTable = tableData => {\r\n  return (dispatch) => {\r\n    const options = {\r\n      method: 'PATCH',\r\n    \r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    \r\n      body: JSON.stringify({\r\n        status: tableData.status,\r\n        peopleAmount: tableData.peopleAmount,\r\n        maxPeopleAmount: tableData.maxPeopleAmount,\r\n        bill: tableData.bill\r\n      })\r\n    };\r\n    \r\n    fetch(`http://localhost:3131/tables/${tableData.id}`, options)\r\n      .then(() => dispatch(editTable(tableData)))\r\n  }\r\n}\r\n\r\nconst tablesReducer = (statePart = [], action) => {\r\n  switch(action.type) {\r\n    case UPDATE_TABLES:\r\n      return [...action.payload]\r\n    case EDIT_TABLE:\r\n      return statePart.map(table => table.id === action.payload.id ? { ...table, ...action.payload } : table)\r\n    default:\r\n      return statePart;\r\n  }\r\n};\r\n\r\nexport default tablesReducer;"]},"metadata":{},"sourceType":"module"}